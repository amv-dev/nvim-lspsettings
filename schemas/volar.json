{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "description": "LSP settings for `volar`",
    "properties": {
        "vue.trace.server": {
            "scope": "window",
            "type": "string",
            "enum": [
                "off",
                "messages",
                "verbose"
            ],
            "default": "off",
            "markdownDescription": "%configuration.trace.server%"
        },
        "vue.server.includeLanguages": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "default": [
                "vue"
            ],
            "markdownDescription": "%configuration.server.includeLanguages%"
        },
        "vue.codeActions.askNewComponentName": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "%configuration.codeActions.askNewComponentName%"
        },
        "vue.suggest.componentNameCasing": {
            "type": "string",
            "enum": [
                "preferKebabCase",
                "preferPascalCase",
                "alwaysKebabCase",
                "alwaysPascalCase"
            ],
            "enumDescriptions": [
                "Prefer kebab-case (lowercase with hyphens, e.g. my-component)",
                "Prefer PascalCase (UpperCamelCase, e.g. MyComponent)",
                "Always kebab-case (enforce kebab-case, e.g. my-component)",
                "Always PascalCase (enforce PascalCase, e.g. MyComponent)"
            ],
            "default": "preferPascalCase",
            "markdownDescription": "%configuration.suggest.componentNameCasing%"
        },
        "vue.suggest.propNameCasing": {
            "type": "string",
            "enum": [
                "preferKebabCase",
                "preferCamelCase",
                "alwaysKebabCase",
                "alwaysCamelCase"
            ],
            "enumDescriptions": [
                "Prefer kebab-case (lowercase with hyphens, e.g. my-prop)",
                "Prefer camelCase (lowerCamelCase, e.g. myProp)",
                "Always kebab-case (enforce kebab-case, e.g. my-prop)",
                "Always camelCase (enforce camelCase, e.g. myProp)"
            ],
            "default": "preferKebabCase",
            "markdownDescription": "%configuration.suggest.propNameCasing%"
        },
        "vue.suggest.defineAssignment": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "%configuration.suggest.defineAssignment%"
        },
        "vue.autoInsert.dotValue": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "%configuration.autoInsert.dotValue%"
        },
        "vue.autoInsert.bracketSpacing": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "%configuration.autoInsert.bracketSpacing%"
        },
        "vue.inlayHints.destructuredProps": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "%configuration.inlayHints.destructuredProps%"
        },
        "vue.inlayHints.missingProps": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "%configuration.inlayHints.missingProps%"
        },
        "vue.inlayHints.inlineHandlerLeading": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "%configuration.inlayHints.inlineHandlerLeading%"
        },
        "vue.inlayHints.optionsWrapper": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "%configuration.inlayHints.optionsWrapper%"
        },
        "vue.inlayHints.vBindShorthand": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "%configuration.inlayHints.vBindShorthand%"
        },
        "vue.format.template.initialIndent": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "%configuration.format.template.initialIndent%"
        },
        "vue.format.script.initialIndent": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "%configuration.format.script.initialIndent%"
        },
        "vue.format.style.initialIndent": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "%configuration.format.style.initialIndent%"
        },
        "vue.format.wrapAttributes": {
            "type": "string",
            "default": "auto",
            "enum": [
                "auto",
                "force",
                "force-aligned",
                "force-expand-multiline",
                "aligned-multiple",
                "preserve",
                "preserve-aligned"
            ],
            "markdownDescription": "%configuration.format.wrapAttributes%"
        }
    }
}