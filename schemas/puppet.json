{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "description": "LSP settings for `puppet`",
    "properties": {
        "puppet.editorService.enable": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable advanced Puppet Language Features"
        },
        "puppet.editorService.debugFilePath": {
            "type": "string",
            "default": "",
            "description": "The absolute filepath where the Puppet Editor Service will output the debugging log. By default no logfile is generated"
        },
        "puppet.editorService.featureFlags": {
            "type": "array",
            "default": [],
            "description": "An array of strings of experimental features to enable in the Puppet Editor Service"
        },
        "puppet.editorService.foldingRange.enable": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable syntax aware code folding provider"
        },
        "puppet.editorService.foldingRange.showLastLine": {
            "type": "boolean",
            "default": false,
            "description": "Show or hide the last line in code folding regions"
        },
        "puppet.editorService.formatOnType.enable": {
            "type": "boolean",
            "default": false,
            "description": "Enable/disable the Puppet document on-type formatter, for example hashrocket alignment"
        },
        "puppet.editorService.formatOnType.maxFileSize": {
            "type": "integer",
            "default": 4096,
            "minimum": 0,
            "description": "Sets the maximum file size (in Bytes) that document on-type formatting will occur. Setting this to zero (0) will disable the file size check. Note that large file sizes can cause performance issues."
        },
        "puppet.editorService.hover.showMetadataInfo": {
            "type": "boolean",
            "default": true,
            "description": "Enable or disable showing Puppet Module version information in the metadata.json file"
        },
        "puppet.editorService.loglevel": {
            "type": "string",
            "default": "normal",
            "description": "Set the logging verbosity level for the Puppet Editor Service, with Debug producing the most output and Error producing the least",
            "enum": [
                "debug",
                "error",
                "normal",
                "warning",
                "verbose"
            ]
        },
        "puppet.editorService.protocol": {
            "type": "string",
            "default": "stdio",
            "description": "The protocol used to communicate with the Puppet Editor Service. By default the local STDIO protocol is used.",
            "enum": [
                "stdio",
                "tcp"
            ]
        },
        "puppet.editorService.puppet.confdir": {
            "type": "string",
            "default": "",
            "description": "The Puppet configuration directory. See https://puppet.com/docs/puppet/latest/dirs_confdir.html for more information"
        },
        "puppet.editorService.puppet.environment": {
            "type": "string",
            "default": "",
            "description": "The Puppet environment to use. See https://puppet.com/docs/puppet/latest/config_print.html#environments for more information"
        },
        "puppet.editorService.puppet.modulePath": {
            "type": "string",
            "default": "",
            "description": "Additional module paths to use when starting the Editor Services. On Windows this is delimited with a semicolon, and on all other platforms, with a colon. For example C:\\Path1;C:\\Path2"
        },
        "puppet.editorService.puppet.vardir": {
            "type": "string",
            "default": "",
            "description": "The Puppet cache directory. See https://puppet.com/docs/puppet/latest/dirs_vardir.html for more information"
        },
        "puppet.editorService.puppet.version": {
            "type": "string",
            "default": "",
            "description": "The version of Puppet to use. For example '5.4.0'. This is generally only applicable when using the PDK installation type. If Puppet Editor Services is unable to use this version, it will default to the latest available version of Puppet."
        },
        "puppet.editorService.tcp.address": {
            "type": "string",
            "description": "The IP address or hostname of the remote Puppet Editor Service to connect to, for example 'computer.domain' or '192.168.0.1'. Only applicable when the editorService.protocol is set to tcp"
        },
        "puppet.validate.resolvePuppetfiles": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable using dependency resolution for Puppetfiles"
        },
        "puppet.editorService.tcp.port": {
            "type": "integer",
            "description": "The TCP Port of the remote Puppet Editor Service to connect to. Only applicable when the editorService.protocol is set to tcp"
        },
        "puppet.editorService.timeout": {
            "type": "integer",
            "default": 10,
            "description": "The timeout to connect to the Puppet Editor Service"
        },
        "puppet.format.enable": {
            "type": "boolean",
            "scope": "window",
            "default": true,
            "description": "Enable/disable the Puppet document formatter"
        },
        "puppet.installDirectory": {
            "type": "string",
            "markdownDescription": "The fully qualified path to the Puppet install directory. This can be a PDK or Puppet Agent installation. For example: 'C:\\Program Files\\Puppet Labs\\Puppet' or '/opt/puppetlabs/puppet'. If this is not set the extension will attempt to detect the installation directory. Do **not** use when `#puppet.installType#` is set to `auto`"
        },
        "puppet.installType": {
            "type": "string",
            "default": "auto",
            "markdownDescription": "The type of Puppet installation. Either the Puppet Development Kit (pdk) or the Puppet Agent (agent). Choose `auto` to have the extension detect which to use automatically based on default install locations",
            "enum": [
                "auto",
                "pdk",
                "agent"
            ],
            "enumDescriptions": [
                "The exention will use the PDK or the Puppet Agent based on default install locations. When both are present, it will use the PDK",
                "Use the PDK as an installation source",
                "Use the Puppet Agent as an installation source"
            ]
        },
        "puppet.notification.nodeGraph": {
            "type": "string",
            "default": "messagebox",
            "description": "The type of notification used when a node graph is being generated. Default value of messagebox",
            "enum": [
                "messagebox",
                "statusbar",
                "none"
            ]
        },
        "puppet.notification.puppetResource": {
            "type": "string",
            "default": "messagebox",
            "description": "The type of notification used when a running Puppet Resouce. Default value of messagebox",
            "enum": [
                "messagebox",
                "statusbar",
                "none"
            ]
        },
        "puppet.pdk.checkVersion": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable checking if installed PDK version is latest"
        },
        "puppet.titleBar.pdkNewModule.enable": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable the PDK New Module icon in the Editor Title Bar"
        }
    }
}