{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "description": "LSP settings for `tailwindcss`",
    "properties": {
        "tailwindCSS.emmetCompletions": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Enable class name completions when using Emmet-style syntax, for example `div.bg-red-500.uppercase`"
        },
        "tailwindCSS.includeLanguages": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            },
            "default": {},
            "markdownDescription": "Enable features in languages that are not supported by default. Add a mapping here between the new language and an already supported language.\n E.g.: `{\"plaintext\": \"html\"}`"
        },
        "tailwindCSS.files.exclude": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "default": [
                "**/.git/**",
                "**/node_modules/**",
                "**/.hg/**",
                "**/.svn/**"
            ],
            "markdownDescription": "Configure glob patterns to exclude from all IntelliSense features. Inherits all glob patterns from the `#files.exclude#` setting."
        },
        "tailwindCSS.classAttributes": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "default": [
                "class",
                "className",
                "ngClass",
                "class:list"
            ],
            "markdownDescription": "The HTML attributes for which to provide class completions, hover previews, linting etc."
        },
        "tailwindCSS.classFunctions": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "default": [],
            "markdownDescription": "The function or tagged template literal names for which to provide class completions, hover previews, linting etc."
        },
        "tailwindCSS.suggestions": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Enable autocomplete suggestions.",
            "scope": "language-overridable"
        },
        "tailwindCSS.hovers": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Enable hovers.",
            "scope": "language-overridable"
        },
        "tailwindCSS.codeActions": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Enable code actions.",
            "scope": "language-overridable"
        },
        "tailwindCSS.codeLens": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Enable code lens.",
            "scope": "language-overridable"
        },
        "tailwindCSS.colorDecorators": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Controls whether the editor should render inline color decorators for Tailwind CSS classes and helper functions.",
            "scope": "language-overridable"
        },
        "tailwindCSS.validate": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Enable linting. Rules can be configured individually using the `tailwindcss.lint.*` settings",
            "scope": "language-overridable"
        },
        "tailwindCSS.lint.cssConflict": {
            "type": "string",
            "enum": [
                "ignore",
                "warning",
                "error"
            ],
            "default": "warning",
            "markdownDescription": "Class names on the same HTML element which apply the same CSS property or properties",
            "scope": "language-overridable"
        },
        "tailwindCSS.lint.invalidApply": {
            "type": "string",
            "enum": [
                "ignore",
                "warning",
                "error"
            ],
            "default": "error",
            "markdownDescription": "Unsupported use of the [`@apply` directive](https://tailwindcss.com/docs/functions-and-directives/#apply)",
            "scope": "language-overridable"
        },
        "tailwindCSS.lint.invalidScreen": {
            "type": "string",
            "enum": [
                "ignore",
                "warning",
                "error"
            ],
            "default": "error",
            "markdownDescription": "Unknown screen name used with the [`@screen` directive](https://tailwindcss.com/docs/functions-and-directives/#screen)",
            "scope": "language-overridable"
        },
        "tailwindCSS.lint.invalidVariant": {
            "type": "string",
            "enum": [
                "ignore",
                "warning",
                "error"
            ],
            "default": "error",
            "markdownDescription": "Unknown variant name used with the [`@variants` directive](https://tailwindcss.com/docs/functions-and-directives/#variants)",
            "scope": "language-overridable"
        },
        "tailwindCSS.lint.invalidConfigPath": {
            "type": "string",
            "enum": [
                "ignore",
                "warning",
                "error"
            ],
            "default": "error",
            "markdownDescription": "Unknown or invalid path used with the [`theme` helper](https://tailwindcss.com/docs/functions-and-directives/#theme)",
            "scope": "language-overridable"
        },
        "tailwindCSS.lint.invalidTailwindDirective": {
            "type": "string",
            "enum": [
                "ignore",
                "warning",
                "error"
            ],
            "default": "error",
            "markdownDescription": "Unknown value used with the [`@tailwind` directive](https://tailwindcss.com/docs/functions-and-directives/#tailwind)",
            "scope": "language-overridable"
        },
        "tailwindCSS.lint.recommendedVariantOrder": {
            "type": "string",
            "enum": [
                "ignore",
                "warning",
                "error"
            ],
            "default": "warning",
            "markdownDescription": "Class variants not in the recommended order (applies in [JIT mode](https://tailwindcss.com/docs/just-in-time-mode) only)",
            "scope": "language-overridable"
        },
        "tailwindCSS.lint.usedBlocklistedClass": {
            "type": "string",
            "enum": [
                "ignore",
                "warning",
                "error"
            ],
            "default": "warning",
            "markdownDescription": "Usage of class names that have been blocklisted via `@source not inline(\u2026)`",
            "scope": "language-overridable"
        },
        "tailwindCSS.experimental.classRegex": {
            "type": "array",
            "scope": "language-overridable"
        },
        "tailwindCSS.experimental.configFile": {
            "type": [
                "null",
                "string",
                "object"
            ],
            "default": null,
            "markdownDescription": "Manually specify the Tailwind config file or files that should be read to provide IntelliSense features. Can either be a single string value, or an object where each key is a config file path and each value is a glob or array of globs representing the set of files that the config file applies to."
        },
        "tailwindCSS.showPixelEquivalents": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Show `px` equivalents for `rem` CSS values."
        },
        "tailwindCSS.rootFontSize": {
            "type": "number",
            "default": 16,
            "markdownDescription": "Root font size in pixels. Used to convert `rem` CSS values to their `px` equivalents. See `#tailwindCSS.showPixelEquivalents#`."
        },
        "tailwindCSS.inspectPort": {
            "type": [
                "number",
                "null"
            ],
            "default": null,
            "markdownDescription": "Enable the Node.js inspector agent for the language server and listen on the specified port."
        },
        "tailwindcss-intellisense.trace.server": {
            "scope": "window",
            "type": "string",
            "enum": [
                "off",
                "messages",
                "verbose"
            ],
            "default": "off",
            "description": "Traces the communication between VS Code and the Tailwind CSS Language Server."
        }
    }
}