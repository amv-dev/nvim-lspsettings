{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "description": "LSP settings for `solidity_ls`",
    "properties": {
        "solidity.nodemodulespackage": {
            "type": "string",
            "default": "solc",
            "description": "The node modules package to find the solcjs compiler"
        },
        "solidity.compileUsingRemoteVersion": {
            "type": "string",
            "default": "latest",
            "description": "Configuration to download a 'remote' solc (js) version binary file from 'https://binaries.soliditylang.org/', for example: 'latest' will always use the latest version, or a specific version like: 'v0.4.3+commit.2353da71', use the command 'Solidity: Get solidity releases' to list all versions available, or just right click in a solidity file and select either `Solidity: Change global compiler version (Remote)` or `Solidity: Change workspace compiler version (Remote)` to use the wizard to set the correct version or setting for either the current workspace or globally"
        },
        "solidity.compilerOptimization": {
            "type": "number",
            "default": 200,
            "description": "Optimize for how many times you intend to run the code. Lower values will optimize more for initial deployment cost, higher values will optimize more for high-frequency usage."
        },
        "solidity.evmVersion": {
            "type": "string",
            "default": "",
            "description": "Evm version, ie london, istanbul, petersburg, constantinople, byzantium, tangerineWhistle, spuriousDragon, homestead, frontier, or leave it blank for the default evm version"
        },
        "solidity.viaIR": {
            "type": "boolean",
            "default": false,
            "description": "Compile using the intermediate representation (IR) instead of the AST"
        },
        "solidity.compileUsingLocalVersion": {
            "type": "string",
            "default": "",
            "description": "Compile using a local solc (js) binary file, please include the path of the file if wanted: 'C://v0.4.3+commit.2353da71.js'"
        },
        "solidity.defaultCompiler": {
            "type": "string",
            "description": "Sets the default compiler and compiler configuration to use. Remote will use the configured compiler using the setting 'compileUsingRemoteVersion' downloaded from https://binaries.soliditylang.org/', `localFile` will use the solc file in the location configured in the setting: `compileUsingLocalVersion`, `localNodeModule` will attempt to find the solc file in the node_modules folder / package configured on 'nodemodulespackage' and 'embedded' which will use the solc version packaged with the extension. The default is 'remote' which is configured as 'latest'",
            "enum": [
                "remote",
                "localFile",
                "localNodeModule",
                "embedded"
            ],
            "default": "remote"
        },
        "solidity.linter": {
            "type": "string",
            "enum": [
                "",
                "solhint",
                "solium"
            ],
            "default": "solhint",
            "description": "Enables linting using either solium (ethlint) or solhint. Possible options 'solhint' and 'solium', the default is solhint"
        },
        "solidity.solhintRules": {
            "type": [
                "object"
            ],
            "default": null,
            "description": "Solhint linting validation rules"
        },
        "solidity.formatter": {
            "type": "string",
            "default": "prettier",
            "enum": [
                "none",
                "prettier",
                "forge"
            ],
            "description": "Enables / disables the solidity formatter prettier (default) or forge (note it needs to be installed)"
        },
        "solidity.soliumRules": {
            "type": [
                "object"
            ],
            "default": {
                "imports-on-top": 0,
                "variable-declarations": 0,
                "indentation": [
                    "off",
                    4
                ],
                "quotes": [
                    "off",
                    "double"
                ]
            },
            "description": "Solium linting validation rules"
        },
        "solidity.enabledAsYouTypeCompilationErrorCheck": {
            "type": "boolean",
            "default": true,
            "description": "Enables as you type compilation of the document and error highlighting"
        },
        "solidity.validationDelay": {
            "type": "number",
            "default": 1500,
            "description": "Delay to trigger the validation of the changes of the current document (compilation, solium)"
        },
        "solidity.packageDefaultDependenciesDirectory": {
            "type": [
                "string",
                "string[]"
            ],
            "default": [
                "node_modules",
                "lib"
            ],
            "description": "Default directory for Packages Dependencies, i.e: 'node_modules', 'lib'. This is used to avoid typing imports with that path prefix, multiple dependency paths can be set as an array: ['node_modules', 'lib'] "
        },
        "solidity.monoRepoSupport": {
            "type": "boolean",
            "default": true,
            "description": "Enables mono repo support in the current workspace, a project folder will be signaled if a file is found on the current folder or above including: remappings.txt, truffle-config.js, brownie-config.yaml, foundry.toml, hardhat.config.js, hardhat.config.ts, dappfile"
        },
        "solidity.packageDefaultDependenciesContractsDirectory": {
            "type": [
                "string",
                "string[]"
            ],
            "default": [
                "src",
                "contracts",
                ""
            ],
            "description": "Default directory where the Package Dependency store its contracts, i.e: 'src', 'contracts', or just a blank string '', this is used to avoid typing imports with subfolder paths"
        },
        "solidity.remappings": {
            "type": "array",
            "default": [],
            "description": "Remappings to resolve contracts to local files / directories, i.e: [\"@openzeppelin/=lib/openzeppelin-contracts\",\"ds-test/=lib/ds-test/src/\"]"
        },
        "solidity.remappingsWindows": {
            "type": "array",
            "default": [],
            "description": "Windows Remappings to resolve contracts to local Windows files / directories (Note this overrides the generic remapping settings if the OS is Windows) , i.e: [\"@openzeppelin/=C:/lib/openzeppelin-contracts\",\"ds-test/=C:/lib/ds-test/src/\"]"
        },
        "solidity.remappingsUnix": {
            "type": "array",
            "default": [],
            "description": "Unix Remappings to resolve contracts to local Unix files / directories (Note this overrides the generic remapping settings if the OS is Unix based), i.e: [\"@openzeppelin/=/opt/lib/openzeppelin-contracts\",\"ds-test/=/opt/lib/ds-test/src/\"]"
        },
        "solidity.explorer_etherscan_apikey": {
            "type": "string",
            "default": "YourApiKey",
            "description": "Api key for downloading ethereum smart contracts from etherscan.io"
        },
        "solidity.explorer_etherscan_optimism_apikey": {
            "type": "string",
            "default": "YourApiKey",
            "description": "Api key for downloading optimism smart contracts from api-optimistic.etherscan.io"
        },
        "solidity.explorer_bscscan_apikey": {
            "type": "string",
            "default": "YourApiKey",
            "description": "Api key for downloading Binance smart chain smart contracts from api.bscscan.com"
        },
        "solidity.explorer_polygonscan_apikey": {
            "type": "string",
            "default": "YourApiKey",
            "description": "Api key for downloading polygon smart contracts from api.polygonscan.com"
        }
    }
}